'use strict';

const os = require('os');
const _ = require('lodash');
const isDocker = require('is-docker');
const { machineIdSync } = require('node-machine-id');
const ciEnv = require('ci-info');
const ee = require('../../utils/ee');
const { itly } = require('../../itly/index');
const Destination = require('./destination');

itly.load({
  plugins: [new Destination()],
});

const defaultQueryOpts = {
  timeout: 1000,
  headers: { 'Content-Type': 'application/json' },
};

/**
 * Add properties from the package.json strapi key in the metadata
 * @param {object} metadata
 */
const addPackageJsonStrapiMetadata = (metadata, strapi) => {
  const { packageJsonStrapi = {} } = strapi.config;

  _.defaults(metadata, packageJsonStrapi);
};

/**
 * Create a send function for event with all the necessary metadatas
 * @param {Object} strapi strapi app
 * @returns {Function} (event, payload) -> Promise{boolean}
 */
module.exports = strapi => {
  const { uuid } = strapi.config;
  const deviceId = machineIdSync();
  const isEE = strapi.EE === true && ee.isEE === true;

  const anonymous_metadata = {
    environment: strapi.config.environment,
    os: os.type(),
    osPlatform: os.platform(),
    osRelease: os.release(),
    nodeVersion: process.version,
    docker: process.env.DOCKER || isDocker(),
    isCI: ciEnv.isCI,
    version: strapi.config.get('info.strapi'),
    strapiVersion: strapi.config.get('info.strapi'),
    projectType: isEE ? 'Enterprise' : 'Community',
  };

  addPackageJsonStrapiMetadata(anonymous_metadata, strapi);

  return async (event, payload = {}, opts = {}) => {
    console.log(event);
    try {
      if (event === 'didInitializeI18n') event = 'didInitializeI18N'; // temporary solution as autogenerated Iteratively library capitalizes "n"
      if (event === 'didUpdateI18nLocales') event = 'didUpdateI18NLocales'; // temporary solution as autogenerated Iteratively library capitalizes "n"
      itly[event](
        '',
        { deviceId, uuid },
        {
          'packages-core-strapi': {
            // packages-core-strapi is the name of Iteratively custom destination, it is needed for this to work
            properties: {
              ...payload,
              ...anonymous_metadata,
            },
            ..._.merge({}, defaultQueryOpts, opts),
          },
        }
      );
      // return res.ok;
    } catch (err) {
      console.log(err);
      return false;
    }
  };
};
